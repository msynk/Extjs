<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ output extension=".cs" #>
<#
  var efHost = (EfTextTemplateHost)Host;
  string entityName = efHost.EntityType.Name;
  string entityLowerName = entityName.ToLower();
#>
//  <autogenerated code>
//    This code generated automatically by a tool.
//    DO NOT change it!!!
//  </autogenerated code>

using System.Collections.Generic;
using Avrin.TCS.BLL.BLOs.Bases;
using Avrin.TCS.BLL.DTOs;
using Avrin.TCS.DAL.Services.Interfaces;
using Avrin.TCS.DAL.Services.Interfaces.Bases;
using Avrin.TCS.DomainModels.Models;
using Avrin.TCS.BLL.Initializers;

namespace Avrin.TCS.BLL.BLOs
{
	public partial class <#= entityName #>BLO : BaseBLO<<#= entityName #>>
  {

    public static <#= entityName #>BLO GetInstance()
    {
      return InstanceFactory.GetInstance<<#= entityName #>BLO>();
    }

    public I<#= entityName #>Service Service { get { return _<#= entityLowerName #>Service; } }

    private readonly I<#= entityName #>Service _<#= entityLowerName #>Service;
    private readonly IUnitOfWork _uow;

    public <#= entityName #>BLO(I<#= entityName #>Service <#= entityLowerName #>Service, IUnitOfWork uow)
      : base(<#= entityLowerName #>Service, uow)
    {
      _<#= entityLowerName #>Service = <#= entityLowerName #>Service;
      _uow = uow;
    }

    public <#= entityName #>DTO Get<#= entityName #>(long id)
    {
      return <#= entityName #>DTO.From<#= entityName #>(Get(id));
    }

    public IList<<#= entityName #>DTO> GetAll<#= entityName #>s()
    {
      return <#= entityName #>DTO.From<#= entityName #>s(GetAll());
    }

    public int Add<#= entityName #>(<#= entityName #>DTO <#= entityLowerName #>DTO)
    {
      return Add(<#= entityName #>DTO.To<#= entityName #>(<#= entityLowerName #>DTO));
    }

    public int Edit<#= entityName #>(<#= entityName #>DTO <#= entityLowerName #>DTO)
    {
      return Edit(<#= entityName #>DTO.To<#= entityName #>(<#= entityLowerName #>DTO));
    }

    public int Delete<#= entityName #>(long id)
	  {
	    return Delete(id);
	  }
  }
}

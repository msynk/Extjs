<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ include file="D:\Developing\Projects\Avrin\Implementations\Avrin.TCS\Avrin.TCS.DomainModels\CodeTemplates\ReverseEngineerCodeFirst\ProcessTemplate.ttinclude" #>
<#@ output extension=".cs" #>
<#
  var efHost = (EfTextTemplateHost)Host;
  var code = new CodeGenerationTools(this);
  var entityName = efHost.EntityType.Name;
  Generate(entityName);
#>
//  <autogenerated code>
//    This code generated automatically by a tool.
//    DO NOT change it!!!
//  </autogenerated code>

using System;
using System.Collections.Generic;

namespace Avrin.TCS.DomainModels.Models
{
	public class <#= efHost.EntityType.Name #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
          if(efHost.EntityType.Name == "AllowableValue")
          {
          var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n => n.RelationshipType == navProperty.RelationshipType && n != navProperty).Single();
          var association = (AssociationType)otherNavProperty.RelationshipType;
          var fieldName = code.Escape(association.ReferentialConstraints.Single().ToProperties.Single().Name);
          var table = code.Escape(navProperty);
          int output;
          var tableName = int.TryParse(table.Substring(table.Length - 1), out output) ? table.Substring(0, table.Length - 1) : table;
          //var tableName = code.Escape(navProperty.ToEndMember.GetEntityType()) + "s";
  #>
            <#= tableName + fieldName #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
          }
          else
          {
#>
            <#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
          }
        }
      
#>
        }
<#
    }
#>
        public void Swap(<#= entityName #> entity)
        {
<#
    foreach (var property in efHost.EntityType.Properties)
    {
#>
            <#= code.Escape(property) #> = entity.<#= code.Escape(property) #>;
<#
    }
#>
        }
<#
    foreach (var property in efHost.EntityType.Properties)
    {
#>
        <#= Accessibility.ForProperty(property) #> <#= code.Escape(property.TypeUsage) #> <#= code.Escape(property) #> { get; set; }
<#
    }
#>
<#
    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
      if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
      {
        if(efHost.EntityType.Name == "AllowableValue")
        {
          var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n => n.RelationshipType == navProperty.RelationshipType && n != navProperty).Single();
          var association = (AssociationType)otherNavProperty.RelationshipType;
          var fieldName = code.Escape(association.ReferentialConstraints.Single().ToProperties.Single().Name);
          var table = code.Escape(navProperty);
          int output;
          var tableName = int.TryParse(table.Substring(table.Length - 1), out output) ? table.Substring(0, table.Length - 1) : table;
          //var tableName = code.Escape(navProperty.ToEndMember.GetEntityType()) + "s";
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= tableName + fieldName #> { get; set; }
<#
        }
        else
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
      }
      else
      {
        if(code.Escape(navProperty.ToEndMember.GetEntityType()) == "AllowableValue")
        {
        var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n => n.RelationshipType == navProperty.RelationshipType && n != navProperty).Single();
        var association = (AssociationType)otherNavProperty.RelationshipType;
        var fieldName = code.Escape(association.ReferentialConstraints.Single().ToProperties.Single().Name);
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= fieldName + "AV" #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
      }
    }
#>
    }
}
